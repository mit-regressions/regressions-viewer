import React, { useRef } from "react";
import { type NextPage } from "next";
import Head from "next/head";

import { signIn, signOut, useSession } from "next-auth/react";

import { trpc } from "../utils/trpc";
import { useTheme } from 'next-themes'
import Player from '../components/Player'


const Home: NextPage = () => {

  const hello = trpc.example.hello.useQuery({ text: "from tRPC" });
  const { theme, setTheme } = useTheme()

  return (
    <>
      <Head>
        <title>viewer</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className="flex min-h-screen flex-col items-center justify-center bg-white dark:bg-black">
        <button onClick={() => setTheme(theme === 'dark' ? 'light' : 'dark')} className="bg-gray-200 dark:bg-gray-800 text-gray-800 dark:text-gray-200 py-2 px-4 absolute top-4 right-4">
          toggle theme
        </button>
        <div className="container flex flex-col items-center justify-center gap-12 px-4 py-16 ">
          {/* should hug upper-lefthand side */}
          {/* text in the upper-lefthand corner with some padding */}
          <div className="titles">
            <h1 className="text-1xl font-extrabold tracking-tight text-black dark:text-white sm:text-[3rem] top-4 left-4 absolute">
              documentary metadata viewer
            </h1>
            {/* hug the left-hand side of the screen */}
            <h2 className=" tracking-tight text-gray-500 dark:text-white  top-20 left-6 absolute"><i>current film</i>: MIT: REGRESSIONS intro</h2>
          </div>
         

          <Player />

          <div className="flex flex-col items-center gap-2">
            <AuthShowcase />
          </div>
        </div>
      </main>
    </>
  );
}

export default Home;

const AuthShowcase: React.FC = () => {
  const { data: sessionData } = useSession();

  const { data: secretMessage } = trpc.auth.getSecretMessage.useQuery(
    undefined, // no input
    { enabled: sessionData?.user !== undefined },
  );

  return (
    <div className="flex flex-col items-center justify-center gap-4">
      <p className="text-center text-2xl text-white">
        {sessionData && <span>Logged in as {sessionData.user?.name}</span>}
        {secretMessage && <span> - {secretMessage}</span>}
      </p>
      <button
        className="bg-white/10 px-10 py-3 font-semibold text-white no-underline transition hover:bg-white/20"
        onClick={sessionData ? () => signOut() : () => signIn()}
      >
        {sessionData ? "Sign out" : "Sign in"}
      </button>
    </div>
  );
};
